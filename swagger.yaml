openapi: 3.0.1
info:
  title: ToDo List API
  version: 1.0.0
  description: API for managing ToDo items

paths:
  /todos:
    get:
      summary: Get ToDo items
      parameters:
        - in: query
          name: status
          description: Filter tasks by status
          schema:
            type: string
            enum: [CREATED, COMPLETED, POSTPONED, DELETED]
        - in: query
          name: importance
          description: Filter tasks by importance
          schema:
            type: string
            enum: [LOW, MEDIUM, HIGH, URGENT]
      responses:
        '200':
          description: Successfully retrieved list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToDoResponse'
              examples:
                example1:
                  value:
                    - id: 1
                      explanation: "Buy groceries"
                      importance: "HIGH"
                      status: "CREATED"
                    - id: 2
                      explanation: "Finish project"
                      importance: "MEDIUM"
                      status: "COMPLETED"
                example2:
                  value:
                    - id: 3
                      explanation: "Read a book"
                      importance: "LOW"
                      status: "POSTPONED"
        '500':
          description: Internal server error

    post:
      summary: Add a new ToDo item
      requestBody:
        description: ToDo item details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToDoRequest'
            examples:
              example1:
                value:
                  explanation: "Go for a run"
                  importance: "MEDIUM"
              example2:
                value:
                  explanation: "Work on a project"
                  importance: "HIGH"
      responses:
        '201':
          description: Successfully added
          content:
            application/json:
              examples:
                example1:
                  value:
                    id: 4
                example2:
                  value:
                    id: 5
        '400':
          description: Bad request
          content:
            application/json:
              example:
                message: "Explanation cannot be blank."
        '500':
          description: Internal server error

  /todos/{id}:
    put:
      summary: Update a ToDo item
      parameters:
        - in: path
          name: id
          required: true
          description: ToDo item ID
          schema:
            type: integer
      requestBody:
        description: Updated ToDo item details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateToDoRequest'
            examples:
              example1:
                value:
                  id: 1
                  explanation: "Buy groceries"
                  importance: "HIGH"
                  status: "CREATED"
              example2:
                value:
                  id: 2
                  explanation: "Finish project"
                  importance: "LOW"
                  status: "COMPLETED"
      responses:
        '200':
          description: Successfully updated
        '400':
          description: Bad request
          content:
            application/json:
              example:
                message: "Invalid status provided."
        '404':
          description: Not found
          content:
            application/json:
              example:
                message: "ToDo item not found."
        '500':
          description: Internal server error

    delete:
      summary: Delete a ToDo item
      parameters:
        - in: path
          name: id
          required: true
          description: ToDo item ID
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted
        '404':
          description: Not found
          content:
            application/json:
              example:
                message: "ToDo item not found."
        '500':
          description: Internal server error

    get:
      summary: Get details of a ToDo item
      parameters:
        - in: path
          name: id
          required: true
          description: ToDo item ID
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDoResponse'
              examples:
                example1:
                  value:
                    id: 1
                    explanation: "Buy groceries"
                    importance: "HIGH"
                    status: "CREATED"
                example2:
                  value:
                    id: 2
                    explanation: "Finish project"
                    importance: "MEDIUM"
                    status: "COMPLETED"
        '404':
          description: Not found
          content:
            application/json:
              example:
                message: "ToDo item not found."
        '500':
          description: Internal server error
          
    patch:
      summary: Update the status of a ToDo item
      parameters:
        - in: path
          name: id
          required: true
          description: ToDo item ID
          schema:
            type: integer
      requestBody:
        description: Update for the status of a ToDo item
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusRequest'
            examples:
              example1:
                value:
                  status: "COMPLETED"
              example2:
                value:
                  status: "POSTPONED"
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDoResponse'
              examples:
                example1:
                  value:
                    id: 1
                    explanation: "Buy groceries"
                    importance: "HIGH"
                    status: "COMPLETED"
                example2:
                  value:
                    id: 2
                    explanation: "Finish project"
                    importance: "LOW"
                    status: "POSTPONED"
        '400':
          description: Bad request
          content:
            application/json:
              example:
                message: "Invalid status provided."
        '404':
          description: Not found
          content:
            application/json:
              example:
                message: "ToDo item not found."
        '500':
          description: Internal server error

components:
  schemas:

    ToDoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the ToDo item
        explanation:
          type: string
          description: Explanation of the ToDo item
        importance:
          $ref: '#/components/schemas/Importance'
        status:
          $ref: '#/components/schemas/Status'

    AddToDoRequest:
      type: object
      required:
        - explanation
        - importance
      properties:
        explanation:
          type: string
          description: Explanation for the ToDo item
          minLength: 1
        importance:
          $ref: '#/components/schemas/Importance'
          description: Importance level

    UpdateToDoRequest:
      type: object
      required:
        - id
        - explanation
        - importance
        - status
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the ToDo item
        explanation:
          type: string
          description: Explanation for the ToDo item
          minLength: 1
        importance:
          $ref: '#/components/schemas/Importance'
          description: Importance level
        status:
          $ref: '#/components/schemas/Status'
          description: Status of the ToDo item
          
    UpdateStatusRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
          description: Updated status of the ToDo item

    Importance:
      type: string
      enum: [LOW, MEDIUM, HIGH, URGENT]
      description: Importance level

    Status:
      type: string
      enum: [CREATED, COMPLETED, POSTPONED, DELETED]
      description: Status
      
    
